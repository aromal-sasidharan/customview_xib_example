//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `SFUIDisplay-Bold.ttf`.
    static let sfuiDisplayBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Bold", pathExtension: "ttf")
    /// Resource file `SFUIDisplay-Light.ttf`.
    static let sfuiDisplayLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Light", pathExtension: "ttf")
    /// Resource file `SFUIDisplay-Medium.ttf`.
    static let sfuiDisplayMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Medium", pathExtension: "ttf")
    /// Resource file `SFUIDisplay-Regular.ttf`.
    static let sfuiDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Regular", pathExtension: "ttf")
    /// Resource file `SFUIDisplay-Semibold.ttf`.
    static let sfuiDisplaySemiboldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Semibold", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "SFUIDisplay-Bold", withExtension: "ttf")`
    static func sfuiDisplayBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Light", withExtension: "ttf")`
    static func sfuiDisplayLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Medium", withExtension: "ttf")`
    static func sfuiDisplayMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Regular", withExtension: "ttf")`
    static func sfuiDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SFUIDisplay-Semibold", withExtension: "ttf")`
    static func sfuiDisplaySemiboldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplaySemiboldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFUIDisplay-Bold`.
    static let sfuiDisplayBold = Rswift.FontResource(fontName: "SFUIDisplay-Bold")
    /// Font `SFUIDisplay-Light`.
    static let sfuiDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
    /// Font `SFUIDisplay-Medium`.
    static let sfuiDisplayMedium = Rswift.FontResource(fontName: "SFUIDisplay-Medium")
    /// Font `SFUIDisplay-Regular`.
    static let sfuiDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")
    /// Font `SFUIDisplay-Semibold`.
    static let sfuiDisplaySemibold = Rswift.FontResource(fontName: "SFUIDisplay-Semibold")
    
    /// `UIFont(name: "SFUIDisplay-Bold", size: ...)`
    static func sfuiDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBold, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
    static func sfuiDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayLight, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Medium", size: ...)`
    static func sfuiDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayMedium, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
    static func sfuiDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayRegular, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
    static func sfuiDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplaySemibold, size: size)
    }
    
    static func validate() throws {
      if R.font.sfuiDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'SFUIDisplay-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Medium' could not be loaded, is 'SFUIDisplay-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Bold' could not be loaded, is 'SFUIDisplay-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'SFUIDisplay-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Semibold' could not be loaded, is 'SFUIDisplay-Semibold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `FromStackView`.
    static let fromStackView = _R.nib._FromStackView()
    /// Nib `PayTransferFromCellTableViewCell`.
    static let payTransferFromCellTableViewCell = _R.nib._PayTransferFromCellTableViewCell()
    
    /// `UINib(name: "FromStackView", in: bundle)`
    static func fromStackView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fromStackView)
    }
    
    /// `UINib(name: "PayTransferFromCellTableViewCell", in: bundle)`
    static func payTransferFromCellTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.payTransferFromCellTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _FromStackView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FromStackView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PayTransferFromCellTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PayTransferFromCellTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PayTransferFromCellTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PayTransferFromCellTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
